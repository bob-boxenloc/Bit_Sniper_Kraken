#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'initialisation avec donn√©es historiques
"""

import json
from core.state_manager import StateManager
from data.indicators import TechnicalIndicators
from core.logger import get_logger

logger = get_logger(__name__)

def test_initialization():
    """Teste l'initialisation avec les donn√©es historiques"""
    logger.info("=== TEST D'INITIALISATION ===")
    
    # Test 1: Chargement des donn√©es
    logger.info("Test 1: Chargement des donn√©es d'initialisation")
    state_manager = StateManager()
    initial_data = state_manager.load_initial_data()
    
    if not initial_data:
        logger.error("‚ùå √âchec du chargement des donn√©es")
        return False
    
    logger.info(f"‚úÖ Donn√©es charg√©es: {len(initial_data)} bougies")
    
    # Test 2: Validation des donn√©es
    logger.info("Test 2: Validation des donn√©es")
    if len(initial_data) < 27:
        logger.error(f"‚ùå Donn√©es insuffisantes: {len(initial_data)} bougies (minimum 27)")
        return False
    
    # V√©rifier le format
    for i, candle in enumerate(initial_data):
        required_fields = ['datetime', 'close', 'rsi', 'volume_normalized']
        missing_fields = [field for field in required_fields if field not in candle]
        if missing_fields:
            logger.error(f"‚ùå Bougie {i} manque: {missing_fields}")
            return False
    
    logger.info("‚úÖ Format des donn√©es valide")
    
    # Test 3: Initialisation des indicateurs
    logger.info("Test 3: Initialisation des indicateurs")
    indicators = TechnicalIndicators()
    
    if not indicators.initialize_with_historical_data(initial_data):
        logger.error("‚ùå √âchec de l'initialisation des indicateurs")
        return False
    
    logger.info("‚úÖ Indicateurs initialis√©s")
    
    # Test 4: V√©rification des donn√©es
    logger.info("Test 4: V√©rification des donn√©es")
    
    current_data = indicators.get_latest_data()
    logger.info(f"Donn√©es actuelles: {current_data}")
    
    if not indicators.is_ready():
        logger.error("‚ùå Indicateurs pas pr√™ts")
        return False
    
    logger.info("‚úÖ Indicateurs pr√™ts")
    
    # Test 5: Affichage des derni√®res valeurs
    logger.info("Test 5: Affichage des derni√®res valeurs")
    logger.info(f"Prix actuel: {indicators.get_current_price():.2f}")
    logger.info(f"RSI actuel: {indicators.get_current_rsi():.2f}")
    logger.info(f"Volume normalis√© actuel: {indicators.get_current_volume_normalized():.2f}")
    
    # Test 6: Test d'ajout d'une nouvelle bougie
    logger.info("Test 6: Test d'ajout d'une nouvelle bougie")
    indicators.add_candle(
        timestamp="2025-07-05T12:00:00",
        close=108200.0,
        rsi=52.5,
        volume_normalized=15.0
    )
    
    logger.info(f"Nouveau prix: {indicators.get_current_price():.2f}")
    logger.info(f"Nouveau RSI: {indicators.get_current_rsi():.2f}")
    logger.info(f"Nouveau volume: {indicators.get_current_volume_normalized():.2f}")
    
    logger.info("‚úÖ Test d'ajout r√©ussi")
    
    # Test 7: Marquer comme initialis√©
    logger.info("Test 7: Marquage comme initialis√©")
    state_manager.mark_initialized()
    
    if state_manager.is_initialized():
        logger.info("‚úÖ Bot marqu√© comme initialis√©")
    else:
        logger.error("‚ùå √âchec du marquage")
        return False
    
    logger.info("=== TOUS LES TESTS R√âUSSIS ===")
    return True

if __name__ == "__main__":
    success = test_initialization()
    if success:
        print("\nüéâ Initialisation r√©ussie ! Le bot est pr√™t √† fonctionner.")
    else:
        print("\n‚ùå √âchec de l'initialisation. V√©rifiez les logs ci-dessus.") 