"""
D√©monstration de la gestion avanc√©e des erreurs r√©seau pour BitSniper
"""

import time
import logging
from core.error_handler import NetworkErrorHandler, handle_network_errors, error_handler
from core.monitor import SystemMonitor, system_monitor

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def demo_retry_with_backoff():
    """D√©monstration du retry avec backoff exponentiel"""
    print("\n" + "="*60)
    print("D√âMONSTRATION: RETRY AVEC BACKOFF EXPONENTIEL")
    print("="*60)
    
    # Fonction qui simule des erreurs r√©seau temporaires
    call_count = 0
    def simulate_network_error():
        nonlocal call_count
        call_count += 1
        print(f"  Tentative {call_count}...")
        
        if call_count < 4:
            raise ConnectionError(f"Erreur r√©seau temporaire #{call_count}")
        else:
            print("  ‚úÖ Connexion r√©ussie!")
            return "Donn√©es r√©cup√©r√©es avec succ√®s"
    
    # Appliquer le d√©corateur de retry
    robust_function = handle_network_errors(
        max_retries=5,
        base_delay=1.0,
        max_delay=10.0,
        timeout=30.0
    )(simulate_network_error)
    
    print("Ex√©cution d'une fonction avec retry automatique...")
    start_time = time.time()
    
    try:
        result = robust_function()
        end_time = time.time()
        print(f"‚úÖ R√©sultat: {result}")
        print(f"‚è±Ô∏è  Temps total: {end_time - start_time:.2f} secondes")
        
    except Exception as e:
        print(f"‚ùå √âchec final apr√®s tous les retry: {e}")

def demo_circuit_breaker():
    """D√©monstration du circuit breaker"""
    print("\n" + "="*60)
    print("D√âMONSTRATION: CIRCUIT BREAKER")
    print("="*60)
    
    # Fonction qui √©choue toujours (simule un service en panne)
    def failing_service():
        raise Exception("Service temporairement indisponible")
    
    robust_service = handle_network_errors(
        max_retries=2,
        base_delay=0.5
    )(failing_service)
    
    print("Test du circuit breaker avec un service en panne...")
    
    # Ex√©cuter plusieurs fois pour d√©clencher le circuit breaker
    for i in range(8):
        try:
            print(f"  Tentative {i+1}...")
            robust_service()
        except Exception as e:
            print(f"    ‚ùå √âchec: {e}")
        
        # V√©rifier l'√©tat du circuit breaker
        if error_handler.error_stats.is_circuit_open():
            print("    üîå Circuit breaker OUVERT - Arr√™t des tentatives")
            break
    
    print(f"üìä Statistiques d'erreur:")
    print(f"   - Erreurs totales: {error_handler.error_stats.total_errors}")
    print(f"   - Erreurs cons√©cutives: {error_handler.error_stats.consecutive_errors}")
    print(f"   - Circuit ouvert: {error_handler.error_stats.is_circuit_open()}")

def demo_system_monitoring():
    """D√©monstration du monitoring syst√®me"""
    print("\n" + "="*60)
    print("D√âMONSTRATION: MONITORING SYST√àME")
    print("="*60)
    
    # Afficher le statut syst√®me actuel
    print("üìä Statut syst√®me actuel:")
    system_monitor.print_status()
    
    # Simuler quelques erreurs pour voir les alertes
    print("\nüîç Simulation d'erreurs pour tester les alertes...")
    for i in range(3):
        error_handler.error_stats.add_error(
            Exception(f"Erreur de test #{i+1}"),
            f"test_context_{i+1}"
        )
        time.sleep(0.1)
    
    # V√©rifier les alertes
    alerts = system_monitor.check_alerts()
    if alerts:
        print("\nüö® Alertes d√©tect√©es:")
        for alert in alerts:
            print(f"   ‚Ä¢ {alert}")
    else:
        print("\n‚úÖ Aucune alerte d√©tect√©e")
    
    # Afficher un r√©sum√© des erreurs
    error_summary = error_handler.get_error_summary()
    print(f"\nüìà R√©sum√© des erreurs:")
    print(f"   - Erreurs totales: {error_summary['total_errors']}")
    print(f"   - Erreurs cons√©cutives: {error_summary['consecutive_errors']}")
    print(f"   - Circuit ouvert: {error_summary['circuit_open']}")
    
    if error_summary['recent_errors']:
        print(f"   - Derni√®res erreurs:")
        for error in error_summary['recent_errors'][-3:]:  # 3 derni√®res
            print(f"     ‚Ä¢ {error['timestamp']}: {error['error_message']}")

def demo_error_recovery():
    """D√©monstration de la r√©cup√©ration d'erreurs"""
    print("\n" + "="*60)
    print("D√âMONSTRATION: R√âCUP√âRATION D'ERREURS")
    print("="*60)
    
    # Simuler une r√©cup√©ration apr√®s des erreurs
    print("Simulation d'une r√©cup√©ration apr√®s des erreurs...")
    
    # Ajouter quelques erreurs
    for i in range(5):
        error_handler.error_stats.add_error(
            Exception(f"Erreur avant r√©cup√©ration #{i+1}"),
            "recovery_test"
        )
    
    print(f"√âtat apr√®s erreurs:")
    print(f"  - Erreurs cons√©cutives: {error_handler.error_stats.consecutive_errors}")
    print(f"  - Circuit ouvert: {error_handler.error_stats.is_circuit_open()}")
    
    # Simuler des succ√®s pour r√©cup√©rer
    print("\nSimulation de succ√®s pour r√©cup√©rer...")
    for i in range(3):
        error_handler.error_stats.add_success()
        print(f"  Succ√®s #{i+1} - Erreurs cons√©cutives: {error_handler.error_stats.consecutive_errors}")
    
    print(f"\n√âtat apr√®s r√©cup√©ration:")
    print(f"  - Erreurs cons√©cutives: {error_handler.error_stats.consecutive_errors}")
    print(f"  - Circuit ouvert: {error_handler.error_stats.is_circuit_open()}")
    print(f"  - Syst√®me sain: {error_handler.is_healthy()}")

def demo_monitoring_data_save():
    """D√©monstration de la sauvegarde des donn√©es de monitoring"""
    print("\n" + "="*60)
    print("D√âMONSTRATION: SAUVEGARDE DES DONN√âES")
    print("="*60)
    
    # G√©n√©rer et sauvegarder les donn√©es de monitoring
    filename = "demo_monitoring_data.json"
    
    try:
        system_monitor.save_monitoring_data(filename)
        print(f"‚úÖ Donn√©es de monitoring sauvegard√©es dans {filename}")
        
        # Afficher un aper√ßu des donn√©es sauvegard√©es
        import json
        with open(filename, 'r') as f:
            data = json.load(f)
        
        print(f"\nüìÑ Aper√ßu des donn√©es sauvegard√©es:")
        print(f"   - Timestamp: {data['timestamp']}")
        print(f"   - Sant√© syst√®me: {'OK' if data['system_health']['is_healthy'] else 'PROBL√àME'}")
        print(f"   - Erreurs totales: {data['system_health']['error_count']}")
        print(f"   - Trades totaux: {data['trading_metrics']['total_trades']}")
        print(f"   - Alertes: {len(data['alerts'])}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")

def main():
    """Fonction principale de d√©monstration"""
    print("üöÄ D√âMONSTRATION DE LA GESTION AVANC√âE DES ERREURS R√âSEAU")
    print("="*60)
    print("Ce script d√©montre les fonctionnalit√©s de robustesse du bot BitSniper:")
    print("‚Ä¢ Retry automatique avec backoff exponentiel")
    print("‚Ä¢ Circuit breaker pour √©viter les surcharges")
    print("‚Ä¢ Monitoring syst√®me en temps r√©el")
    print("‚Ä¢ Syst√®me d'alertes intelligent")
    print("‚Ä¢ Sauvegarde des donn√©es de monitoring")
    print("="*60)
    
    try:
        # Ex√©cuter les d√©monstrations
        demo_retry_with_backoff()
        demo_circuit_breaker()
        demo_system_monitoring()
        demo_error_recovery()
        demo_monitoring_data_save()
        
        print("\n" + "="*60)
        print("‚úÖ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS")
        print("="*60)
        print("Le bot BitSniper est maintenant √©quip√© d'une gestion d'erreurs")
        print("robuste pour fonctionner de mani√®re fiable 24/7 sur un VPS.")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
        logger.error(f"Erreur dans la d√©monstration: {e}")

if __name__ == "__main__":
    main() 