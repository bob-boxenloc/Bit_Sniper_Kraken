#!/usr/bin/env python3
"""
Script de test pour les notifications email BitSniper
Teste l'envoi d'emails pour les entr√©es et sorties de positions
"""

import os
from core.notifications import BrevoNotifier

def test_notifications():
    """Teste l'envoi des notifications email."""
    print("üß™ TEST DES NOTIFICATIONS EMAIL BITSNIPER")
    print("=" * 50)
    
    # V√©rifier les variables d'environnement
    api_key = os.getenv('BREVO_API_KEY')
    sender_email = os.getenv('BREVO_SENDER_EMAIL')
    receiver_email = os.getenv('BREVO_RECEIVER_EMAIL')
    
    if not all([api_key, sender_email, receiver_email]):
        print("‚ùå Variables d'environnement manquantes:")
        print(f"   BREVO_API_KEY: {'‚úÖ' if api_key else '‚ùå'}")
        print(f"   BREVO_SENDER_EMAIL: {'‚úÖ' if sender_email else '‚ùå'}")
        print(f"   BREVO_RECEIVER_EMAIL: {'‚úÖ' if receiver_email else '‚ùå'}")
        print("\nüîß Configuration requise dans .env:")
        print("   BREVO_API_KEY=votre_cl√©_api_brevo")
        print("   BREVO_SENDER_EMAIL=bot@votre_domaine.com")
        print("   BREVO_RECEIVER_EMAIL=votre_email@gmail.com")
        return False
    
    print("‚úÖ Variables d'environnement configur√©es")
    print(f"   Exp√©diteur: {sender_email}")
    print(f"   Destinataire: {receiver_email}")
    
    # Initialiser le notificateur
    notifier = BrevoNotifier()
    
    if not notifier.enabled:
        print("‚ùå Notifications d√©sactiv√©es")
        return False
    
    print("‚úÖ Notificateur Brevo initialis√©")
    
    # Test 1: Entr√©e en position SHORT
    print("\nüìß Test 1: Notification d'entr√©e en position SHORT")
    success1 = notifier.send_trade_notification(
        action="ENTR√âE",
        position_type="SHORT",
        price="$45,250.00",
        size=0.0035
    )
    print(f"   R√©sultat: {'‚úÖ Succ√®s' if success1 else '‚ùå √âchec'}")
    
    # Test 2: Sortie de position LONG_VI1
    print("\nüìß Test 2: Notification de sortie de position LONG_VI1")
    success2 = notifier.send_trade_notification(
        action="SORTIE",
        position_type="LONG_VI1",
        price="$46,100.00",
        pnl=125.50
    )
    print(f"   R√©sultat: {'‚úÖ Succ√®s' if success2 else '‚ùå √âchec'}")
    
    # Test 3: Sortie d'urgence
    print("\nüìß Test 3: Notification de sortie d'urgence")
    success3 = notifier.send_trade_notification(
        action="SORTIE D'URGENCE",
        position_type="LONG_VI2",
        price="$44,800.00",
        pnl=-85.25
    )
    print(f"   R√©sultat: {'‚úÖ Succ√®s' if success3 else '‚ùå √âchec'}")
    
    # Test 4: Sortie contr√¥le 3H
    print("\nüìß Test 4: Notification de sortie contr√¥le 3H")
    success4 = notifier.send_trade_notification(
        action="SORTIE CONTR√îLE 3H",
        position_type="SHORT",
        price="$45,500.00",
        pnl=45.75
    )
    print(f"   R√©sultat: {'‚úÖ Succ√®s' if success4 else '‚ùå √âchec'}")
    
    # Test 5: Croisement VI1 BEARISH
    print("\nüìß Test 5: Notification de croisement VI1 BEARISH")
    success5 = notifier.send_trade_notification(
        action="CROISEMENT VI1",
        position_type="BEARISH (au-dessus)",
        price="$45,250.00"
    )
    print(f"   R√©sultat: {'‚úÖ Succ√®s' if success5 else '‚ùå √âchec'}")
    
    # Test 6: Croisement VI1 BULLISH
    print("\nüìß Test 6: Notification de croisement VI1 BULLISH")
    success6 = notifier.send_trade_notification(
        action="CROISEMENT VI1",
        position_type="BULLISH (en-dessous)",
        price="$44,800.00"
    )
    print(f"   R√©sultat: {'‚úÖ Succ√®s' if success6 else '‚ùå √âchec'}")
    
    # Test 7: Notification de crash TRADING
    print("\nüìß Test 7: Notification de crash TRADING")
    success7 = notifier.send_crash_notification(
        error_type="CRASH TRADING",
        error_message="Erreur de connexion √† l'API Kraken",
        stack_trace="Traceback (most recent call last):\n  File 'main.py', line 340, in trading_loop\n    md = MarketData()\nConnectionError: [Errno 111] Connection refused",
        context="Test de notification de crash"
    )
    print(f"   R√©sultat: {'‚úÖ Succ√®s' if success7 else '‚ùå √âchec'}")
    
    # Test 8: Notification de crash FATAL
    print("\nüìß Test 8: Notification de crash FATAL")
    success8 = notifier.send_crash_notification(
        error_type="CRASH FATAL",
        error_message="Erreur critique dans le syst√®me de monitoring",
        stack_trace="Traceback (most recent call last):\n  File 'main.py', line 900, in main\n    run_every_15min(trading_loop)\nSystemError: Critical system failure",
        context="Test de notification de crash fatal"
    )
    print(f"   R√©sultat: {'‚úÖ Succ√®s' if success8 else '‚ùå √âchec'}")
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    tests = [success1, success2, success3, success4, success5, success6, success7, success8]
    successful = sum(tests)
    total = len(tests)
    
    print(f"   Tests r√©ussis: {successful}/{total}")
    print(f"   Taux de succ√®s: {(successful/total)*100:.1f}%")
    
    if successful == total:
        print("üéâ Toutes les notifications fonctionnent parfaitement !")
        return True
    else:
        print("‚ö†Ô∏è  Certaines notifications ont √©chou√©")
        return False

if __name__ == "__main__":
    test_notifications()
